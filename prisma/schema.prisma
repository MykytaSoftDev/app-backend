// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(cuid())
  email    String   @unique
  name     String
  password String
  apiKey   String   @unique @map("api_key")
  isAdmin  Boolean? @default(false) @map("is_admin")

  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  Domain      Domain[]
  Pages       Page[]
  Translation Translation[]

  @@index([email, apiKey])
  @@map("users")
}

model Domain {
  id String @id @default(cuid())

  domainName      String    @map("domain_name")
  platform        Platform?
  sourceLanguage  String    @map("source_language")
  targetLanguages String[]  @default([]) @map("target_languages")
  wordsCount      Int?      @default(0) @map("words_count")
  isPublished     Boolean   @default(true) @map("is_published")
  isActivated     Boolean   @default(false) @map("is_activated")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String        @map("user_id")
  Pages       Page[]
  Translation Translation[]

  @@unique([userId, domainName])
  @@index([userId, domainName])
  @@map("domains")
}

model Page {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  domain   Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId String @map("domain_id")

  pageUrl        String        @map("page_url")
  targetLanguage String        @map("target_language")
  wordsCount     Int           @default(0) @map("words_count")
  isExcluded     Boolean       @default(false) @map("is_excluded")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  Translation    Translation[]

  @@index([userId, domainId])
  @@map("pages")
}

model Translation {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  domain   Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId String @map("domain_id")

  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId String @map("page_id")

  sourceHash     String @unique @map("source_hash") @db.VarChar(64)
  sourceText     String @map("source_text")
  translatedText String @map("translated_text")
  sourceLanguage String @map("source_language")
  targetLanguage String @map("target_language")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@index([domainId])
  @@index([pageId, targetLanguage])
  @@map("translations")
}

model Language {
  id            Int     @id @default(autoincrement())
  title         String  @unique
  titleNative   String  @unique @map("title_native")
  code2         String  @unique
  code3         String  @unique
  isRightToLeft Boolean @map("is_right_to_left")
  support       Support

  @@index([id, code2])
  @@map("languages")
}

enum Platform {
  wordpress
  joomla
  squarespace
  shopify
  other
}

enum Support {
  google
  deepl
}
