// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       String   @id @default(cuid())
  email    String   @unique
  name     String?
  password String
  apiKey   String   @unique @map("api_key")
  isAdmin  Boolean? @default(false) @map("is_admin")

  plan      Plan   @relation(fields: [planId], references: [id])
  planId    Int    @default(1) @map("plan_id")
  planAlias String @default("free")

  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  Pages       Page[]
  Translation Translation[]
  Project     Project[]
  Statistic   UserStatistic[]
  Glossary    Glossary[]

  @@index([email, apiKey])
  @@map("users")
}

model Project {
  id String @id @default(cuid())

  domainName            String    @map("domain_name")
  projectName           String    @default("My Website") @map("project_name")
  projectKey            String    @unique @map("project_key")
  platform              Platform?
  sourceLanguage        String    @map("source_language")
  targetLanguages       String[]  @default([]) @map("target_languages")
  wordsCount            Int?      @default(0) @map("words_count")
  isPublished           Boolean   @default(true) @map("is_published")
  newTranslationEnabled Boolean   @default(true) @map("new_translation_enabled")
  isActivated           Boolean   @default(false) @map("is_activated")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user                 User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String            @map("user_id")
  Pages                Page[]
  Translation          Translation[]
  ProjectSettings      ProjectSettings[]
  Statistic            UserStatistic[]
  DomExclusion         BlockExclusion[]
  PageExclusionPattern PageExclusion[]
  Glossary             Glossary[]

  @@unique([userId, domainName])
  @@index([userId, domainName])
  @@map("projects")
}

model Page {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @map("project_id")

  pageUrl        String          @map("page_url")
  targetLanguage String          @map("target_language")
  wordsCount     Int             @default(0) @map("words_count")
  isExcluded     Boolean         @default(false) @map("is_excluded")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  Translation    Translation[]
  Statistic      UserStatistic[]

  @@index([userId, projectId])
  @@map("pages")
}

model Translation {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @map("project_id")

  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId String @map("page_id")

  sourceHash     String @map("source_hash") @db.VarChar(64)
  sourceText     String @map("source_text")
  translatedText String @map("translated_text")
  sourceLanguage String @map("source_language")
  targetLanguage String @map("target_language")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([sourceHash, pageId])
  @@index([userId])
  @@index([projectId])
  @@index([pageId, targetLanguage])
  @@map("translations")
}

model BlockExclusion {
  id          String @id @default(cuid())
  selector    String
  description String @default("")

  projectId String   @map("project_id")
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")

  @@index([projectId])
  @@map("block_exclusions")
}

model PageExclusion {
  id        String           @id @default(cuid())
  pattern   String
  rule      PatternMatchType
  projectId String           @map("project_id")
  project   Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime         @default(now()) @map("created_at")

  @@index([projectId])
  @@map("page_exclusions")
}

model Language {
  id            Int     @id @default(autoincrement())
  title         String  @unique
  titleNative   String  @unique @map("title_native")
  code2         String  @unique
  code3         String  @unique
  flag          String  @default("")
  isRightToLeft Boolean @map("is_right_to_left")
  support       Support

  @@index([id, code2])
  @@map("languages")
}

model ProjectSettings {
  id                String            @id @default(cuid())
  project           Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId         String            @map("project_id")
  titleDisplayMode  TitleDisplayMode  @default(native) @map("title_display_mode")
  flagDisplayMode   FlagDisplayMode   @default(circle) @map("flag_display_mode")
  widgetDisplayMode WidgetDisplayMode @default(dropdown) @map("widget_display_mode")
  widgetStyle       WidgetStyle       @default(rectangle) @map("widget_style")
  urlStructure      UrlStructure      @default(default) @map("url_structure")
  position          Position          @default(rightBottom) @map("position")
  customPosition    String            @default("") @map("custom_position")

  @@index([projectId])
  @@map("project_settings")
}

model Plan {
  id        Int    @id @default(autoincrement())
  planName  String @map("plan_name")
  planAlias String @map("plan_alias")

  wordsLimit     Int @map("words_limit")
  languagesLimit Int @map("languages_limit")
  projectsLimit  Int @map("projects_limit")

  monthlyPrice Float @map("monthly_price")
  yearlyPrice  Float @map("yearly_price")

  monthlyPaddleId Int @map("monthly_paddle_id")
  yearlyPaddleId  Int @map("yearly_paddle_id")

  User User[]

  @@index([id, planAlias])
  @@map("plans")
}

model UserStatistic {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @map("project_id")

  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId String @map("page_id")

  views          Int    @default(0)
  targetLanguage String @map("target_language")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId, projectId, pageId])
  @@map("user_statistic")
}

model Glossary {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @map("project_id")

  sourceText      String           @map("source_text")
  targetText      String?          @map("target_text")
  sourceLanguage  String           @map("source_language")
  targetLanguages String[]         @default([]) @map("target_languages")
  behavior        GlossaryBehavior
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")

  @@index([projectId])
  @@index([userId])
  @@map("glossary")
}

enum GlossaryBehavior {
  translate
  keep_original
}

enum Platform {
  bigcommerce
  bubble
  drupal
  jimdo
  joomla
  magento
  other
  prestashop
  salesforce
  shopify
  squareonline
  squarespace
  webflow
  weebly
  wix
  wordpress
}

enum PatternMatchType {
  equal
  contain
  start
  end
}

enum Support {
  google
  deepl
}

// Settings enums
enum Position {
  rightBottom
  leftBottom
  rightTop
  leftTop
}

enum TitleDisplayMode {
  none
  default
  native
  code2
  code3
}

enum FlagDisplayMode {
  none
  rectangle
  circle
}

enum WidgetDisplayMode {
  dropdown
  popup
}

enum WidgetStyle {
  rectangle
  round
}

enum UrlStructure {
  default
  subdomain
  subdirectory
}
